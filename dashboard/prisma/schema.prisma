// Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  passwordHash String?
  role String?
  
  dashboardAccess UserDashboard[]
  settings UserSettings?
  subscription Subscription?
  passwordResetTokens PasswordResetToken[]
}

model UserSettings {
  id String @id @default(cuid())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  
  // Theme preferences
  theme String @default("system") // "light", "dark", "system"
  language String @default("en") // ISO language codes
  
  // Email preferences
  emailNotifications Boolean @default(true) // Sign up, login, password reset, reminders, alerts etc.
  marketingEmails Boolean @default(false) // Product updates, features, tips
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dashboard {
  id String @id @default(cuid())
  siteId String @unique
  domain String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAccess UserDashboard[]
  funnels Funnel[]
  settings DashboardSettings?
}

model UserDashboard {
  id String @id @default(cuid())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  
  dashboard Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  dashboardId String
  
  role String @default("viewer")
  
  isDefault Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, dashboardId])
}

model Funnel {
  id String @id @default(cuid())

  name     String
  isStrict Boolean @default(true)
  queryFilters Json

  dashboard    Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  dashboardId  String
}

model DashboardSettings {
  id String @id @default(cuid())
  
  dashboard Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  dashboardId String @unique
  
  // Display Settings
  showGridLines Boolean @default(true)
  defaultDateRange String @default("7d") // 24h, 7d, 28d, 3mo
  
  // Data Settings
  dataRetentionDays Int @default(365) // Number of days to retain data
  
  // Report Settings
  weeklyReports Boolean @default(true)
  monthlyReports Boolean @default(false)
  reportRecipients String[] @default([]) // Array of email addresses
  
  // Alert Settings
  alertsEnabled Boolean @default(false)
  alertsThreshold Int @default(1000) // Threshold for traffic alerts
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id String @id @default(cuid())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  
  // Plan configuration
  tier String // "growth", "professional", "enterprise"
  eventLimit Int // Selected event limit: 10_000, 50_000, 100_000, etc.
  pricePerMonth Int // Price in cents
  currency String @default("USD")
  
  // Billing cycle
  currentPeriodStart DateTime
  currentPeriodEnd DateTime
  
  // Quota tracking
  quotaExceededDate DateTime?
  
  // Subscription status
  status String @default("active") // "active", "canceled"
  cancelAtPeriodEnd Boolean @default(false)
  
  // Payment provider integration
  paymentCustomerId String?
  paymentSubscriptionId String?
  paymentPriceId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, status])
  @@index([currentPeriodStart, currentPeriodEnd])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  
  @@index([token])
  @@index([userId])
}